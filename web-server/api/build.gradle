plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "com.moowork.node" version "1.3.1"
    id 'java'
}

group = 'com.hotplace'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

apply plugin: "com.moowork.node"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}


def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

def hotPlaceDir = rootProject.projectDir.getParentFile().getParentFile()
def frontDir = "$hotPlaceDir\\front"

task npmBuildTask(type: NpmTask) {
    workingDir = file("$frontDir")
    args = ["run", "build"]

    doLast {
        println "success npm build"
    }
}

task copyTask(type: Copy) {
    dependsOn(npmBuildTask)

    from "$frontDir\\build"
    into "${project.projectDir}\\src\\main\\resources\\static"

    doLast{
        println "success copy from $frontDir\\\\build  to ${project.projectDir}\\src\\main\\resources\\static"
    }
}

task loadFrontPage(){
    dependsOn(copyTask)

    doLast{
        println "success build & copy"
    }
}



